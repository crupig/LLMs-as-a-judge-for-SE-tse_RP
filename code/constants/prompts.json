{
    "Code Generation" : "<DESCRIPTION>\n<SIGNATURE>",
    
    "Code Generation ChatGPT" : "Implement the following <LANGUAGE> method.\nDescription: \"<DESCRIPTION>\"\nSignature: \"<SIGNATURE>\"\nOnly output the method implementation including the signature, and no other text.",

    "Summary Generation" : "Pretend that you are an experienced <LANGUAGE> programmer. Generate a short docstring (# Docstring) for the following <LANGUAGE> method (# <LANGUAGE> method):\n\n# <LANGUAGE> method:\n<FUNCTION>\n\n# Docstring:\n",
    
    "Judge Code Generation Boolean" : "You will be provided with the description (\"Description\") and the signature (\"Signature\") of a <LANGUAGE> function to implement. You will also see a candidate implementation (\"Candidate\"). Your role is to evaluate the correctness of the Candidate, providing as output a rating (# Rating) and a rationale (# Rationale). Rate the Candidate with either 0 or 1:\n\n0. **Wrong Implementation**: The implementation does not correctly implement the described function.\n1. **Correct Implementation**: The implementation correctly implements the described function.\n\n# Description\n<DESCRIPTION>\n\n# Signature\n<SIGNATURE>\n\n# Candidate\n<CANDIDATE>\n#",

    "Judge Code Generation Boolean No Rationale" : "You will be provided with the description (\"Description\") and the signature (\"Signature\") of a <LANGUAGE> function to implement. You will also see a candidate implementation (\"Candidate\"). Your role is to evaluate the correctness of the Candidate, providing as output a rating (# Rating), and no other text. Rate the Candidate with either 0 or 1:\n\n0. **Wrong Implementation**: The implementation does not correctly implement the described function.\n1. **Correct Implementation**: The implementation correctly implements the described function.\n\n# Description\n<DESCRIPTION>\n\n# Signature\n<SIGNATURE>\n\n# Candidate\n<CANDIDATE>\n#",

    "Judge Code Generation 5-Level" : "You will be provided with the description (\"Description\") and the signature (\"Signature\") of a <LANGUAGE> function to implement. You will also see a candidate implementation (\"Candidate\"). Your role is to evaluate the correctness of the Candidate, providing as output a rating (# Rating) and a rationale (# Rationale). Rate the Candidate on a scale from 1 to 5:\n\n1. **Very unlikely to be correct**: You are highly confident that the provided implementation is wrong.\n\n2. **Unlikely to be correct**:  You are confident that the provided implementation is wrong.\n\n3. **Undecided**: You are unable to assess the correctness of the Candidate based on the provided information.\n\n4. **Likely to be correct**: You are confident that the provided implementation is correct.\n\n5. **Very likely to be correct**: You are highly confident that the provided implementation is correct.\n\n# Description\n<DESCRIPTION>\n\n# Signature\n<SIGNATURE>\n\n# Candidate\n<CANDIDATE>\n#",

    "Judge Code Generation 5-Level No Rationale" : "You will be provided with the description (\"Description\") and the signature (\"Signature\") of a <LANGUAGE> function to implement. You will also see a candidate implementation (\"Candidate\"). Your role is to evaluate the correctness of the Candidate, providing as output a rating (# Rating). Rate the Candidate on a scale from 1 to 5:\n\n1. **Very unlikely to be correct**: You are highly confident that the provided implementation is wrong.\n\n2. **Unlikely to be correct**:  You are confident that the provided implementation is wrong.\n\n3. **Undecided**: You are unable to assess the correctness of the Candidate based on the provided information.\n\n4. **Likely to be correct**: You are confident that the provided implementation is correct.\n\n5. **Very likely to be correct**: You are highly confident that the provided implementation is correct.\n\n# Description\n<DESCRIPTION>\n\n# Signature\n<SIGNATURE>\n\n# Candidate\n<CANDIDATE>\n#",

    "Judge Code Generation Slow-Thinking Pt1" : "You will be provided with a problem statement and a code snippet that supposedly addresses the problem in <LANGUAGE>.\nYour task is to check if the code snippet covers the required functionalities. Do not provide a corrected version.\nEvaluation Steps:\n1. Read the problem statement carefully and identify the required functionalities of the implementation.\n2. Read the code snippet and analyze its logic. Check if the code snippet covers all the required functionalities of the problem.\n3. Finally, conclude your evaluation.\nEnd your evaluation with \"# End of Evaluation\".\n\nProblem Statement:\n<DESCRIPTION>\n\nSignature:\n<SIGNATURE>\n\nCode Snippet:\n<CANDIDATE>\n\n# Begin of Evaluation:\n",

    "Judge Code Generation Slow-Thinking Pt2" : "You will be provided with an analysis result of a code snippet.\nIf the analysis believes that the code snippet is correct, output: \"Yes\". Otherwise, output: \"No\".\n\nAnalysis Result:\n<ANALYSIS>\n\nOutput:\n",

    "Judge Code Generation Step-By-Step Pt1" : "You will be provided with the description (\"Description\") and the signature (\"Signature\") of a <LANGUAGE> function to implement. You will also see a candidate implementation (\"Candidate\"). DO NOT provide a corrected version of the Candidate.\n\n# Description\n<DESCRIPTION>\n\n# Signature\n<SIGNATURE>\n\n# Candidate\n<CANDIDATE>\n\n# Question: is the Candidate correct according to all the functional requirements of the Description? Answer choices: \"Yes\" or \"No\".\n\n# Reasoning:\nLet's think step by step.",

    "Judge Code Generation Step-By-Step Pt2" : "\n<ANALYSIS>\n\nTherefore, the answer (\"Yes\" or \"No\") is:\n",
    
    "Judge Code Summarization" : "You will be provided with a <LANGUAGE> function (\"Function\") and a textual summary of it (\"Comment\"). The goal of the Comment is to document the functionality implemented in the Function. Your role is to evaluate the Comment across three criteria, providing as output for each of them a rating (# Rating) as described in the following, and no other text.\n\n# Evaluation Criteria\n* Content adequacy: the extent to which the comment summarizes all information that can be inferred from the source code.\n\n* Conciseness: the extent to which the comment contains unnecessary information.\n\n* Fluency & Understandability: the extent to which the comment is easy to read and understand.\n\nFor each criterion, provide a score on a scale from 1 to 5:\n\n1. Very poor\n2. Poor\n3. Fair\n4. Good\n5. Very good\n\n# Function\n<FUNCTION>\n\n# Comment\n<COMMENT>",

    "Judge Code Summarization With Instructions" : "You will be provided with a <LANGUAGE> function (\"Function\") and a textual summary of it (\"Comment\"). The goal of the Comment is to document the functionality implemented in the Function. Your role is to evaluate the Comment across three criteria on a scale from 1 to 5, providing as output for each of them a rating (# Rating) as described in the following, and no other text.\n\n# Evaluation Criteria & Rules\n* Content adequacy:\n\t5: The information in the summary is correct and comprehensive. There is information which cannot be inferred by reading the signature.\n\t4: The information in the summary is correct, but may lack the documentation of some corner cases (e.g., exceptions). There is information which cannot be inferred by reading the signature.\n\t3: The information in the summary is correct, but it mostly describes the method's signature.\n\t2: The information in the summary is partially correct (i.e., features wrong information) and/or lacks the description of large and relevant parts of the method (e.g., when documenting the return value, only a subset of the possible values is reported).\n\t1: The information in the summary is completely out of scope.\n\n* Conciseness:\n\t5: The summary does not contain unneeded and trivial explanations. All text is instrumental to the code understanding.\n\t4: The summary features some extra explanations which may be unnecessary for most of users (e.g., defining trivial concepts such as what the intersection of two sets is).\n\t3: The summary features unneeded repetitions (i.e., the same concept is explained multiple times).\n\t2: The summary mostly features verbose explanations of information which is clearly visible in the code, such as explaining the signature. Repetitions are also present.\n\t1: The summary mostly features verbose explanations of information which is clearly visible in the code, such as explaining the types of parameters, the return type, etc. Repetitions are present as well as sentences explaining concepts unrelated to the code documentation (e.g., what a private method is).\n\n* Fluency & Understandability:\n\t5: The summary is very easy to read and understand and does not require any specific domain knowledge to be understood.\n\t4: The summary is easy to read and understand but may require some specific domain knowledge to be understood.\n\t3: The summary is easy to read and understand for developers having expertise on that system.\n\t2: The summary is difficult to read and understand, but it is grammatically correct.\n\t1: The summary is difficult to read and understand, and grammatically incorrect.\n\n# Function\n<FUNCTION>\n\n# Comment\n<COMMENT>",

    "Judge Code Summarization Step-By-Step Pt1" : "You will be provided with a <LANGUAGE> function (\"Function\") and a textual summary of it (\"Comment\"). The goal of the Comment is to document the functionality implemented in the Function.\n\n# Function\n<FUNCTION>\n\n# Comment\n<COMMENT>\n\n# Question: evaluate the Comment across three Evaluation Criteria\n\n* Content adequacy: the extent to which the comment summarizes all information that can be inferred from the source code.\n* Conciseness: the extent to which the comment contains unnecessary information.\n* Fluency & Understandability: the extent to which the comment is easy to read and understand.\n\n# Reasoning: Let's think step by step.",

    "Judge Code Summarization Step-By-Step Pt2" : "\n<ANALYSIS>\n\n# Now rate all the three criteria based on the reasoning. For each criterion, provide a score on a scale from 1 to 5, and no other text:\n\n1. Very poor\n2. Poor\n3. Fair\n4. Good\n5. Very good\n\n# Rating:\n",

    "Judge Code Summarization With Instructions Step-By-Step Pt1" : "You will be provided with a <LANGUAGE> function (\"Function\") and a textual summary of it (\"Comment\"). The goal of the Comment is to document the functionality implemented in the Function.\n\n# Function\n<FUNCTION>\n\n# Comment\n<COMMENT>\n\n# Question: evaluate the Comment across three Evaluation Criteria, and according to the following Rules\n\n* Content adequacy:\n\t5: The information in the summary is correct and comprehensive. There is information which cannot be inferred by reading the signature.\n\t4: The information in the summary is correct, but may lack the documentation of some corner cases (e.g., exceptions). There is information which cannot be inferred by reading the signature.\n\t3: The information in the summary is correct, but it mostly describes the method's signature.\n\t2: The information in the summary is partially correct (i.e., features wrong information) and/or lacks the description of large and relevant parts of the method (e.g., when documenting the return value, only a subset of the possible values is reported).\n\t1: The information in the summary is completely out of scope.\n\n* Conciseness:\n\t5: The summary does not contain unneeded and trivial explanations. All text is instrumental to the code understanding.\n\t4: The summary features some extra explanations which may be unnecessary for most of users (e.g., defining trivial concepts such as what the intersection of two sets is).\n\t3: The summary features unneeded repetitions (i.e., the same concept is explained multiple times).\n\t2: The summary mostly features verbose explanations of information which is clearly visible in the code, such as explaining the signature. Repetitions are also present.\n\t1: The summary mostly features verbose explanations of information which is clearly visible in the code, such as explaining the types of parameters, the return type, etc. Repetitions are present as well as sentences explaining concepts unrelated to the code documentation (e.g., what a private method is).\n\n* Fluency & Understandability:\n\t5: The summary is very easy to read and understand and does not require any specific domain knowledge to be understood.\n\t4: The summary is easy to read and understand but may require some specific domain knowledge to be understood.\n\t3: The summary is easy to read and understand for developers having expertise on that system.\n\t2: The summary is difficult to read and understand, but it is grammatically correct.\n\t1: The summary is difficult to read and understand, and grammatically incorrect.\n\n# Reasoning: Let's think step by step.",

    "Judge Code Summarization With Instructions Step-By-Step Pt2" : "\n<ANALYSIS>\n\n# Now rate all the three criteria based on the reasoning. For each criterion, provide a score on a scale from 1 to 5 according to the following guidelines, and no other text:\n\n* Content adequacy:\n\t5: The information in the summary is correct and comprehensive. There is information which cannot be inferred by reading the signature.\n\t4: The information in the summary is correct, but may lack the documentation of some corner cases (e.g., exceptions). There is information which cannot be inferred by reading the signature.\n\t3: The information in the summary is correct, but it mostly describes the method's signature.\n\t2: The information in the summary is partially correct (i.e., features wrong information) and/or lacks the description of large and relevant parts of the method (e.g., when documenting the return value, only a subset of the possible values is reported).\n\t1: The information in the summary is completely out of scope.\n\n* Conciseness:\n\t5: The summary does not contain unneeded and trivial explanations. All text is instrumental to the code understanding.\n\t4: The summary features some extra explanations which may be unnecessary for most of users (e.g., defining trivial concepts such as what the intersection of two sets is).\n\t3: The summary features unneeded repetitions (i.e., the same concept is explained multiple times).\n\t2: The summary mostly features verbose explanations of information which is clearly visible in the code, such as explaining the signature. Repetitions are also present.\n\t1: The summary mostly features verbose explanations of information which is clearly visible in the code, such as explaining the types of parameters, the return type, etc. Repetitions are present as well as sentences explaining concepts unrelated to the code documentation (e.g., what a private method is).\n\n* Fluency & Understandability:\n\t5: The summary is very easy to read and understand and does not require any specific domain knowledge to be understood.\n\t4: The summary is easy to read and understand but may require some specific domain knowledge to be understood.\n\t3: The summary is easy to read and understand for developers having expertise on that system.\n\t2: The summary is difficult to read and understand, but it is grammatically correct.\n\t1: The summary is difficult to read and understand, and grammatically incorrect.\n\n# Rating:\n"
}